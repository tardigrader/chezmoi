if v:progname == 'vi'
  set noloadplugins
endif

filetype on
filetype plugin on
packadd! matchit

" Enable completion where available.
" This setting must be set before ALE is loaded.
"
" You should not turn this setting on if you wish to use ALE as a completion
" source for other completion plugins, like Deoplete.
let g:ale_completion_enabled = 1

" Enable Omnicomplete features
set omnifunc=syntaxcomplete#Complete
"set omnifunc=ale#completion#OmniFunc

"-- PLUGINS ------------------------------------------------------------------
" Automatic installation of Plug.
"
" If needed: Install Plug manually: 
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
"
Plug 'scrooloose/nerdtree'              " File manager
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'jlanzarotta/bufexplorer'          " Buffers
"Plug 'vim-pandoc/vim-pandoc'            " Pandoc integration
Plug 'dense-analysis/ale'               " Syntax checking
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
"Plug 'python-mode/python-mode'          " Python IDE for Vim
Plug 'tpope/vim-fugitive'               " Git wrapper
Plug 'gitgutter/Vim'                    " Git gutter
"Plug 'kien/ctrlp.vim'                   " Fuzzy search 
Plug 'tpope/vim-commentary'             " Easy commenting
"Plug 'dracula/vim'                      " Color theme
"Plug 'andbar-ru/vim-unicon'             " Color theme
Plug 'morhetz/gruvbox'                  " Color theme
Plug 'luochen1990/rainbow'              " Rainbow parenthesis

" Initialize plugin system
call plug#end()
"
"-- KEY MAPPINGS -------------------------------------------------------------

nmap <Leader>n :NERDTreeToggle<CR>
nmap <F2> :NERDTreeToggle<CR>

" Vertical split with \v
nmap <Leader>v <C-w>v-<C-w>l

" Horizontal split with \h
nmap <Leader>h <C-w>s-<C-w>l            

" Toggle showing invisible characters on/off
nmap <Leader>l :set list!<CR>

" Toggle highlightning of search results
nmap <Leader>/ :set nohlsearch!<CR>

" Toggle line numbering
nmap <Leader>n :set number!<CR>
nmap <F3> :set number!<CR>

" De-highlight matches and redraw screen
nnoremap <leader><C-l> 
      \:nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr>zz<c-l>

"-- Emacs-like stuff---------------------------------------------------------

" Ctrl-g aborts current action
imap <C-g> <Esc>

" Alt-<   Top of file, Alt-> Bottom, like in Emacs
nmap < gg
nmap > G

" Open file 
map <C-x><C-f> :NERDTreeFind<CR>
"imap <C-x><C-f> <ESC>:NERDTreeFind<CR> " CONFLICTS WITH VIMS COMPLETION!

" Rewrap text
map q gql
vmap q gql
imap q <Esc>gqli

"map <C-x><C-s> :w<CR><C-q><CR>      " Save file. Not possible because of XOFF?

" Get RID OFF F1 kelp key! Make it an ESC key instead.
inoremap <F1> <ESC>
noremap  <F1> <ESC>
noremap  <F1> <ESC>


"-- THEME AND VISUALS--------------------------------------------------------

"if $TERM ==# "xterm-256color"
"    set termguicolors
"endif

let g:gruvbox_italic=1
colorscheme gruvbox
let g_gruvbox_termcolors=16
set background=light
syntax enable           " Turn on syntax highlighting allowing local overrides
set cursorline          " Highlight the line the cursor is on

"-- Statusbar---------------------------------------------------------------
if has("statusline") && !&cp
  set laststatus=2                  " Always show the status bar
  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=\ Col:%v
  set statusline+=\ Buf:#%n
  set statusline+=[%b][0x%B]
  set statusline+=\ \ <F2>\ NERDtree\ <F3>\ LineNrs\
endif

"----------------------------------------------------------------------------

set wrap
set linebreak
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85                  " Show colored column at col 85.
                                    " THAT'S A TOO LONG LINE!
set number                          " Show line numbers
set ruler                           " Show line and column number

set tabstop=4                       " A tab is four spaces
set shiftwidth=2                    " An autoindent (with <<) is two spaces
set expandtab                       " Use spaces, not tabs

set scrolloff=2                     " When page starts to scroll keep the
                                    " cursor two lines from top/bottom

" List chars
set list                            " Show invisible characters
set listchars=""                    " Reset the listchars
set listchars=tab:â–¸\ ,eol:Â¬         " A tab should display as "â–¸"
set listchars+=trail:.              " Show trailing spaces as dots
set listchars+=extends:>            " The character to show in the last
                                    " column when wrap is off and the line
                                    " continues beyond the right of the
                                    " screen
set listchars+=precedes:<           " The character to show in the last
                                    " column when wrap is off and the line
                                    " continues beyond the left of the
                                    " screen

"-- SEARCHING ----------------------------------------------------------------

set hlsearch                        " Highlight matches
set incsearch                       " Incremental searching

" Searches are insensitive BUT it messes with omni complete in html files.
" The remedy below sets noignorecase on html/css/etc.
augroup ignorecase
    autocmd! BufEnter *.css,*.html,*.htm,*scss :set noignorecase 
augroup END

set ignorecase                      " Searches are case insensitive...
set smartcase                       " ... unless they contain at least one
                                    " capital letter

"-- FILE MANAGEMENT ---------------------------------------------------------
"
"-- NERDTree ----------------------------------------------------------------

" Automatically load NERDTree if Vim is opened without any file specified.
if has("autocmd")
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
endif

" Open Vim with NERDTree open if I happen to edit a directory.
if has("autocmd")
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) 
          \&& !exists("s:std_in") | wincmd p | ene | 
          \exe 'NERDTree' argv()[0] | endif
endif

" Let me close Vim even if the only window left is NERDTree.
if has("autocmd")
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") 
          \&& b:NERDTree.isTabTree()) | q | endif
endif

let NERDTreeQuitOnOpen = 1          " Automatically close after opening a file
let NERDTreeDirArrows = 1           " Show pretty arrows on directories
let NERDTreeShowHidden = 1          " Show hidden files

"-- BACKUP AND SWAP FILES ---------------------------------------------------

" Create backup directory if it doesn't exist.
if !isdirectory($HOME.'/.vim/_backup') && exists('*mkdir')
  call mkdir($HOME.'/.vim/_backup')
endif

" Create temp directory if it doesn't exist.
if !isdirectory($HOME.'/.vim/_temp') && exists('*mkdir')
  call mkdir($HOME.'/.vim/_temp')
endif

set backup                          " Enable backups.
set backupdir^=~/.vim/_backup//     " Where to put backup files.
set directory^=~/.vim/_temp//       " Where to put swap files.
set undofile                        " Save the undo tree
set undodir=~/.vim/_backup/         " ...in this directory. 


" -- PROGRAMMING FILETYPE SPECIFIC ------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%*

" Use new vim 8.2 popup windows for Go Doc
let g:go_doc_popup_window = 1

let g:rainbow_active = 1                " Enable rainbow parenthesis

au FileType ruby setlocal sts=2 sw=2    " Enable width of 2 for ruby tabbing

" Load indentation rules and plugins according to the detected filetype.

if has("autocmd")
  filetype plugin indent on
endif

" Reread configuration of Vim if .vimrc is saved
augroup VimConfig
  au!
  autocmd BufWritePost ~/.vimrc       so ~/.vimrc
  autocmd BufWritePost vimrc          so ~/.vimrc
augroup END

" -- MAIL SETTINGS ----------------------------------------------------------
if has('autocmd')"
  autocmd FileType mail   setl noai
  autocmd FileType mail   setl nojs
  autocmd FileType mail   setl nosmartindent
  autocmd FileType mail   setl ts=14
  autocmd FileType mail   setl tw=72
  autocmd FileType mail   setl shiftwidth=2
  autocmd FileType mail   setl expandtab
endif
